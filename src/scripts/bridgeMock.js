/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@bridgelauncher/api-mock/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@bridgelauncher/api-mock/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

    "use strict";
    eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BridgeMock: () => (/* binding */ BridgeMock),\n/* harmony export */   createDefaultBridgeMockConfig: () => (/* binding */ createDefaultBridgeMockConfig)\n/* harmony export */ });\n// src/utils.ts\nfunction windowInsets(left, top, right, bottom) {\n  return { left, top, right, bottom };\n}\n\n// src/BridgeMockConfig.ts\nfunction createDefaultBridgeMockConfig() {\n  return {\n    // system\n    apiLevel: 34,\n    bridgeVersionCode: 2,\n    bridgeVersionName: \"0.0.2-alpha\",\n    logRaisedBridgeEvents: true,\n    // fetch\n    projectUrl: \"/\",\n    appsUrl: \"/mock/apps.json\",\n    makeGetDefaultIconUrl: (packageName) => `/mock/icons/default/${packageName}.png`,\n    // wallpaper\n    logWallpaperEvents: true,\n    logWallpaperScrolling: false,\n    // Bridge button\n    initialBridgeButtonVisibility: \"hidden\",\n    // draw system wallpaper behind web view\n    initialDrawSystemWallpaperBehindWebViewEnabled: true,\n    // overscroll effects\n    initialOverscrollEffects: \"none\",\n    // system night mode\n    canRequestSystemNightMode: true,\n    initialSystemNightMode: \"auto\",\n    // Bridge theme\n    initialBridgeTheme: \"system\",\n    // screen locking \n    initialCanLockScreen: false,\n    // misc actions\n    // toast\n    // window insets & cutouts\n    initialStatusBarAppearance: \"hide\",\n    initialNavigationBarAppearance: \"hide\",\n    statusBarHeight: 24,\n    navigationBarHeight: 48,\n    captionBarWindowInsets: windowInsets(0, 0, 0, 0),\n    captionBarIgnoringVisibilityWindowInsets: windowInsets(0, 0, 0, 0),\n    imeWindowInsets: windowInsets(0, 0, 0, 0),\n    imeAnimationSourceWindowInsets: windowInsets(0, 0, 0, 0),\n    imeAnimationTargetWindowInsets: windowInsets(0, 0, 0, 0),\n    tappableElementWindowInsets: windowInsets(0, 0, 0, 0),\n    tappableElementIgnoringVisibilityWindowInsets: windowInsets(0, 0, 0, 0),\n    systemGesturesWindowInsets: windowInsets(0, 0, 0, 0),\n    mandatorySystemGesturesWindowInsets: windowInsets(0, 0, 0, 0),\n    displayCutoutWindowInsets: windowInsets(0, 0, 0, 0),\n    waterfallWindowInsets: windowInsets(0, 0, 0, 0),\n    displayCutoutPath: null,\n    displayShapePath: null\n  };\n}\n\n// src/BridgeMock.ts\nvar BridgeMock = class {\n  constructor(config) {\n    this._prefix = \"[BridgeMock]\";\n    this.lastErrorMessage = null;\n    this.wallpaperOffsetStepsX = 1;\n    this.wallpaperOffsetStepsY = 1;\n    this.wallpaperOffsetX = 0;\n    this.wallpaperOffsetY = 0;\n    this.config = config ?? createDefaultBridgeMockConfig();\n    this.bridgeButtonVisibility = this.config.initialBridgeButtonVisibility;\n    this.drawSystemWallpaperBehindWebViewEnabled = this.config.initialDrawSystemWallpaperBehindWebViewEnabled;\n    this.overscrollEffects = this.config.initialOverscrollEffects;\n    this.systemNightMode = this.config.initialSystemNightMode;\n    this.bridgeTheme = this.config.initialBridgeTheme;\n    this.statusBarAppearance = this.config.initialStatusBarAppearance;\n    this.navigationBarAppearance = this.config.initialNavigationBarAppearance;\n    this.canLockScreen = this.config.initialCanLockScreen;\n  }\n  // system\n  getAndroidAPILevel() {\n    return this.config.apiLevel;\n  }\n  getBridgeVersionCode() {\n    return this.config.bridgeVersionCode;\n  }\n  getBridgeVersionName() {\n    return this.config.bridgeVersionName;\n  }\n  getLastErrorMessage() {\n    return this.lastErrorMessage;\n  }\n  // fetch\n  getProjectURL() {\n    return this.config.projectUrl;\n  }\n  getAppsURL() {\n    return this.config.appsUrl;\n  }\n  getDefaultAppIconURL(packageName) {\n    return this.config.makeGetDefaultIconUrl(packageName);\n  }\n  // apps\n  requestAppUninstall(packageName, showToastIfFailed) {\n    alert(`${this._prefix} requestAppUninstall: ${packageName}`);\n    this.raiseBridgeEvent(\"appRemoved\", { packageName });\n    return true;\n  }\n  requestOpenAppInfo(packageName, showToastIfFailed) {\n    alert(`${this._prefix} requestOpenAppInfo: ${packageName}`);\n    return true;\n  }\n  requestLaunchApp(packageName, showToastIfFailed) {\n    alert(`${this._prefix} Requested launch ${packageName}`);\n    return true;\n  }\n  // wallpaper\n  _padNum(n) {\n    const s = n.toFixed(4);\n    return `${\" \".repeat(Math.max(0, 6 - s.length))}${s}`;\n  }\n  setWallpaperOffsetSteps(x, y) {\n    this.wallpaperOffsetStepsX = x;\n    this.wallpaperOffsetStepsY = y;\n    if (this.config.logWallpaperEvents)\n      console.log(`${this._prefix} setWallpaperOffsetSteps: x = ${this._padNum(x)} y = ${y} (pages: x = ${Math.round(1 / x) - 1}, y = ${Math.round(1 / y) - 1})`);\n  }\n  setWallpaperOffsets(x, y) {\n    this.wallpaperOffsetX = x;\n    this.wallpaperOffsetY = y;\n    if (this.config.logWallpaperScrolling)\n      console.log(`${this._prefix} setWallpaperOffsets: x = ${this._padNum(x)} y = ${this._padNum(y)} (pages: x = ${this._padNum(x / this.wallpaperOffsetStepsX)} y = ${this._padNum(y / this.wallpaperOffsetStepsY)})`);\n  }\n  sendWallpaperTap(x, y, z = 0) {\n    if (this.config.logWallpaperEvents)\n      console.log(`${this._prefix} sendWallpaperTap: x = ${x}, y = ${y}`);\n  }\n  requestChangeSystemWallpaper(showToastIfFailed) {\n    alert(`${this._prefix} requestChangeSystemWallpaper`);\n    return true;\n  }\n  // Bridge button\n  getBridgeButtonVisibility() {\n    return this.bridgeButtonVisibility;\n  }\n  requestSetBridgeButtonVisibility(state, showToastIfFailed) {\n    this.bridgeButtonVisibility = state;\n    this.raiseBridgeEvent(\"bridgeButtonVisibilityChanged\", { newValue: state });\n    return true;\n  }\n  // draw system wallpaper behind webview\n  getDrawSystemWallpaperBehindWebViewEnabled() {\n    return this.drawSystemWallpaperBehindWebViewEnabled;\n  }\n  requestSetDrawSystemWallpaperBehindWebViewEnabled(enable, showToastIfFailed) {\n    this.drawSystemWallpaperBehindWebViewEnabled = enable;\n    this.raiseBridgeEvent(\"drawSystemWallpaperBehindWebViewChanged\", { newValue: enable });\n    return true;\n  }\n  // overscroll effects\n  getOverscrollEffects() {\n    return this.overscrollEffects;\n  }\n  requestSetOverscrollEffects(effects, showToastIfFailed) {\n    this.overscrollEffects = effects;\n    this.raiseBridgeEvent(\"overscrollEffectsChanged\", { newValue: effects });\n    return true;\n  }\n  // system night mode\n  getSystemNightMode() {\n    return this.systemNightMode;\n  }\n  resolveIsSystemInDarkTheme() {\n    return this.systemNightMode === \"yes\" || this.systemNightMode !== \"no\" && matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  }\n  getCanRequestSystemNightMode() {\n    return this.config.canRequestSystemNightMode;\n  }\n  requestSetSystemNightMode(mode, showToastIfFailed) {\n    this.systemNightMode = mode;\n    this.raiseBridgeEvent(\"systemNightModeChanged\", { newValue: mode });\n    return true;\n  }\n  // Bridge theme\n  getBridgeTheme() {\n    return this.bridgeTheme;\n  }\n  requestSetBridgeTheme(theme, showToastIfFailed) {\n    this.bridgeTheme = theme;\n    this.raiseBridgeEvent(\"bridgeThemeChanged\", { newValue: theme });\n    return true;\n  }\n  // system bars\n  getStatusBarAppearance() {\n    return this.statusBarAppearance;\n  }\n  requestSetStatusBarAppearance(appearance, showToastIfFailed) {\n    this.statusBarAppearance = appearance;\n    this.raiseBridgeEvent(\"statusBarAppearanceChanged\", { newValue: appearance });\n    this.raiseBridgeEvent(\"statusBarsWindowInsetsChanged\", { newValue: this._getStatusBarsWindowInsets() });\n    this.raiseBridgeEvent(\"systemBarsWindowInsetsChanged\", { newValue: this._getSystemBarsWindowInsets() });\n    return true;\n  }\n  getNavigationBarAppearance() {\n    return this.navigationBarAppearance;\n  }\n  requestSetNavigationBarAppearance(appearance, showToastIfFailed) {\n    this.navigationBarAppearance = appearance;\n    this.raiseBridgeEvent(\"navigationBarAppearanceChanged\", { newValue: appearance });\n    this.raiseBridgeEvent(\"navigationBarsWindowInsetsChanged\", { newValue: this._getNavigationBarsWindowInsets() });\n    this.raiseBridgeEvent(\"systemBarsWindowInsetsChanged\", { newValue: this._getSystemBarsWindowInsets() });\n    return true;\n  }\n  // screen locking\n  getCanLockScreen() {\n    return this.canLockScreen;\n  }\n  requestLockScreen(showToastIfFailed) {\n    alert(`${this._prefix} requestLockScreen`);\n    return true;\n  }\n  // misc actions\n  requestOpenBridgeSettings(showToastIfFailed) {\n    alert(`${this._prefix} requestOpenBridgeSettings`);\n    return true;\n  }\n  requestOpenBridgeAppDrawer(showToastIfFailed) {\n    alert(`${this._prefix} requestOpenBridgeAppDrawer`);\n    return true;\n  }\n  requestOpenDeveloperConsole(showToastIfFailed) {\n    alert(`${this._prefix} requestOpenDeveloperConsole`);\n    return true;\n  }\n  requestExpandNotificationShade(showToastIfFailed) {\n    alert(`${this._prefix} requestExpandNotificationShade`);\n    return true;\n  }\n  // toast\n  showToast(message, long) {\n    console.log(`${this._prefix} showToast: ${long ? \"long\" : \"short\"}, message: ${message}`);\n  }\n  // window insets & cutouts\n  _getStatusBarsWindowInsets() {\n    return windowInsets(0, this.statusBarAppearance === \"hide\" ? 0 : this.config.statusBarHeight, 0, 0);\n  }\n  getStatusBarsWindowInsets() {\n    return this.windowInsetsString(this._getStatusBarsWindowInsets());\n  }\n  getStatusBarsIgnoringVisibilityWindowInsets() {\n    return this.windowInsetsString(0, this.config.statusBarHeight, 0, 0);\n  }\n  _getNavigationBarsWindowInsets() {\n    return windowInsets(0, 0, 0, this.navigationBarAppearance === \"hide\" ? 0 : this.config.navigationBarHeight);\n  }\n  getNavigationBarsWindowInsets() {\n    return this.windowInsetsString(this._getNavigationBarsWindowInsets());\n  }\n  getNavigationBarsIgnoringVisibilityWindowInsets() {\n    return this.windowInsetsString(0, 0, 0, this.config.navigationBarHeight);\n  }\n  getCaptionBarWindowInsets() {\n    return this.windowInsetsString(this.config.captionBarWindowInsets);\n  }\n  getCaptionBarIgnoringVisibilityWindowInsets() {\n    return this.windowInsetsString(this.config.captionBarIgnoringVisibilityWindowInsets);\n  }\n  _getSystemBarsWindowInsets() {\n    return windowInsets(\n      0,\n      this.statusBarAppearance === \"hide\" ? 0 : this.config.statusBarHeight,\n      0,\n      this.navigationBarAppearance === \"hide\" ? 0 : this.config.navigationBarHeight\n    );\n  }\n  getSystemBarsWindowInsets() {\n    return this.windowInsetsString(this._getSystemBarsWindowInsets());\n  }\n  getSystemBarsIgnoringVisibilityWindowInsets() {\n    return this.windowInsetsString(\n      0,\n      this.config.statusBarHeight,\n      0,\n      this.config.navigationBarHeight\n    );\n  }\n  getImeWindowInsets() {\n    return this.windowInsetsString(this.config.imeWindowInsets);\n  }\n  getImeAnimationSourceWindowInsets() {\n    return this.windowInsetsString(this.config.imeAnimationSourceWindowInsets);\n  }\n  getImeAnimationTargetWindowInsets() {\n    return this.windowInsetsString(this.config.imeAnimationTargetWindowInsets);\n  }\n  getTappableElementWindowInsets() {\n    return this.windowInsetsString(this.config.tappableElementWindowInsets);\n  }\n  getTappableElementIgnoringVisibilityWindowInsets() {\n    return this.windowInsetsString(this.config.tappableElementIgnoringVisibilityWindowInsets);\n  }\n  getSystemGesturesWindowInsets() {\n    return this.windowInsetsString(this.config.systemGesturesWindowInsets);\n  }\n  getMandatorySystemGesturesWindowInsets() {\n    return this.windowInsetsString(this.config.mandatorySystemGesturesWindowInsets);\n  }\n  getDisplayCutoutWindowInsets() {\n    return this.windowInsetsString(this.config.displayCutoutWindowInsets);\n  }\n  getWaterfallWindowInsets() {\n    return this.windowInsetsString(this.config.waterfallWindowInsets);\n  }\n  getDisplayCutoutPath() {\n    return this.config.displayCutoutPath;\n  }\n  getDisplayShapePath() {\n    return this.config.displayShapePath;\n  }\n  windowInsetsString(leftOrInsets, top, right, bottom) {\n    if (typeof leftOrInsets === \"object\")\n      return JSON.stringify(leftOrInsets);\n    else\n      return JSON.stringify({ left: leftOrInsets, top, right, bottom });\n  }\n  raiseBridgeEvent(...event) {\n    if (this.config.logRaisedBridgeEvents) {\n      const [name, args] = event;\n      console.log(`[BridgeMock] raiseBridgeEvent(${name}): args:`, args);\n    }\n    onBridgeEvent?.(...event);\n  }\n};\n\n\n\n//# sourceURL=webpack://bridge-emulator/./node_modules/@bridgelauncher/api-mock/dist/index.js?");
    
    /***/ }),
    
    /***/ "./src/bridgemock.js":
    /*!***************************!*\
      !*** ./src/bridgemock.js ***!
      \***************************/
    /***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {
    
    eval("const queryString = window.location.search;\nconst urlParams = new URLSearchParams(queryString);\nvar deviceid = urlParams.get('id')\n\nconsole.log(\"INJEXTED\")\nconst { BridgeMock, createDefaultBridgeMockConfig } = __webpack_require__(/*! @bridgelauncher/api-mock */ \"./node_modules/@bridgelauncher/api-mock/dist/index.js\");\nwindow.BridgeMock = BridgeMock\nwindow.createDefaultBridgeMockConfig = createDefaultBridgeMockConfig\nvar config = new createDefaultBridgeMockConfig()\nconfig.logWallpaperEvents = true\nconfig.appsUrl = \"./mock/apps.json\"\nif (!window.Bridge) window.Bridge = new BridgeMock(config);\nconst backupThese = [\"sendWallpaperTap\", \"showToast\", \"requestChangeSystemWallpaper\", \"setWallpaperOffsets\", \"requestSetDrawSystemWallpaperBehindWebViewEnabled\", \"requestSetBridgeButtonVisibility\", \"requestOpenBridgeSettings\"]\nbackupThese.forEach(funcname => {\n    Bridge[funcname + \"backup\"] = Bridge[funcname]\n});\nfunction gel_da(params) {\n\n}\n\nvar deviceid\nvar newFunc = {\n    sendWallpaperTap: function (x, y) {\n        //  console.log(deviceid)\n        Bridge[\"sendWallpaperTap\" + \"backup\"](x, y)\n\n        window.parent.postMessage({ message: [\"bridgecommand\", \"sendWallpaperTap\"], iframe: deviceid, pos: [x, y] }, '*');\n        // console.log(`${this._prefix} sendWallpaperTap: x = ${x}, y = ${y}`);\n    },\n    showToast: function (message, long) {\n        //  console.log(deviceid)\n        Bridge[\"showToast\" + \"backup\"](message, long)\n        window.parent.postMessage({ message: [\"bridgecommand\", \"showToast\"], iframe: deviceid, input: { message: message, long: long } }, '*');\n        // console.log(`${this._prefix} sendWallpaperTap: x = ${x}, y = ${y}`);\n    },\n    requestChangeSystemWallpaper: function () {\n        console.log(\"[BridgeMock] requestChangeSystemWallpaper\")\n        window.parent.postMessage({ message: [\"bridgecommand\", \"requestChangeSystemWallpaper\"], iframe: deviceid }, '*');\n    },\n    setWallpaperOffsets: function (x, y) {\n        Bridge[\"setWallpaperOffsets\" + \"backup\"](x, y)\n        window.parent.postMessage({ message: [\"bridgecommand\", \"setWallpaperOffsets\"], iframe: deviceid, pos: [x, y] }, '*');\n\n    },\n    requestSetDrawSystemWallpaperBehindWebViewEnabled: function (enabled) {\n        Bridge[\"requestSetDrawSystemWallpaperBehindWebViewEnabled\" + \"backup\"](enabled)\n        window.parent.postMessage({ message: [\"bridgecommand\", \"requestSetDrawSystemWallpaperBehindWebViewEnabled\"], iframe: deviceid, enabled: enabled }, '*');\n\n    },\n    requestSetBridgeButtonVisibility: function (enabled) {\n        Bridge[\"requestSetBridgeButtonVisibility\" + \"backup\"](enabled)\n        window.parent.postMessage({ message: [\"bridgecommand\", \"requestSetBridgeButtonVisibility\"], iframe: deviceid, enabled: enabled }, '*');\n\n    },\n    requestOpenBridgeSettings: function () {\n        window.parent.postMessage({ message: [\"bridgecommand\", \"requestOpenBridgeSettings\"], iframe: deviceid }, '*');\n\n    }\n}\nObject.keys(newFunc).forEach(funcname => {\n    window.Bridge[funcname] = newFunc[funcname]\n});\n\n    console.log(\"INJEXTED\")\n\n    const injectstyle = document.createElement(\"style\")\n    injectstyle.textContent = bridgemockstyle\n    document.head.appendChild(injectstyle)\n\n    alert = function (message) {\n        Bridge.showToast(message, false)\n    }\n    window.alert = function (message) {\n        Bridge.showToast(message, false)\n    }\n    try {\n        Bridge\n        window.parent.postMessage({ message: [\"bridgecommand\", \"deviceLoaded\"], iframe: deviceid }, '*');\n        window.parent.postMessage({\n            message: [\"bridgecommand\", \"setWallpaperOffsets\"], iframe: deviceid, pos: [Bridge.wallpaperOffsetX, Bridge.wallpaperOffsetY]\n        }, '*');\n        window.parent.postMessage({ message: [\"bridgecommand\", \"requestSetDrawSystemWallpaperBehindWebViewEnabled\"], iframe: deviceid, enabled: Bridge.drawSystemWallpaperBehindWebViewEnabled }, '*');\n        window.parent.postMessage({ message: [\"bridgecommand\", \"requestSetBridgeButtonVisibility\"], iframe: deviceid, enabled: Bridge.bridgeButtonVisibility }, '*');\n\n    } catch (error) {\n        console.log(\"post error\")\n        window.parent.postMessage({ message: [\"bridgecommand\", \"deviceFail\"], iframe: deviceid }, '*');\nconsole.error(error)\n    }\n\n\n    `  <div class=\"wallpaperpicker\">\n<div class=\"wallpaperpickerpage\">\n<h1>Wallpapers</h1>\n<div class=\"item\"><img src=\"assets/wallpapers/joshua-fuller-Ws3Yl69vHPo-unsplash.jpg\" /></div>\n<div class=\"item\"><img src=\"assets/wallpapers/lennon-cheng-WTSn3axynUk-unsplash.jpg\" /></div>\n<div class=\"item\"><img src=\"assets/wallpapers/nexus.png\" /></div>\n<div class=\"item isv\"><svg height=\"24\" viewBox=\"0 -960 960 960\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">            <path d=\"M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h320q17 0 28.5 11.5T560-800q0 17-11.5 28.5T520-760H200v560h560v-320q0-17 11.5-28.5T800-560q17 0 28.5 11.5T840-520v320q0 33-23.5 56.5T760-120H200Zm480-560h-40q-17 0-28.5-11.5T600-720q0-17 11.5-28.5T640-760h40v-40q0-17 11.5-28.5T720-840q17 0 28.5 11.5T760-800v40h40q17 0 28.5 11.5T840-720q0 17-11.5 28.5T800-680h-40v40q0 17-11.5 28.5T720-600q-17 0-28.5-11.5T680-640v-40ZM450-320l-74-99q-6-8-16-8t-16 8l-80 107q-8 10-2 21t18 11h400q12 0 18-11t-2-21L586-459q-6-8-16-8t-16 8L450-320Zm30-160Z\"></path>\n</svg>\n</div>\n<div>\n<defs></defs>\n\n</div>`\n\n\nalert = function (message) {\n    Bridge.showToast(message, false)\n}\nwindow.alert = function (message) {\n    Bridge.showToast(message, false)\n}\n\nvar bridgemockstyle = `\n::-webkit-scrollbar{\n    display: none;\n  }\n`\n\n//# sourceURL=webpack://bridge-emulator/./src/bridgemock.js?");
    
    /***/ })
    
    /******/ 	});
    /************************************************************************/
    /******/ 	// The module cache
    /******/ 	var __webpack_module_cache__ = {};
    /******/ 	
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/ 		// Check if module is in cache
    /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
    /******/ 		if (cachedModule !== undefined) {
    /******/ 			return cachedModule.exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = __webpack_module_cache__[moduleId] = {
    /******/ 			// no module.id needed
    /******/ 			// no module.loaded needed
    /******/ 			exports: {}
    /******/ 		};
    /******/ 	
    /******/ 		// Execute the module function
    /******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
    /******/ 	
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/ 	
    /************************************************************************/
    /******/ 	/* webpack/runtime/define property getters */
    /******/ 	(() => {
    /******/ 		// define getter functions for harmony exports
    /******/ 		__webpack_require__.d = (exports, definition) => {
    /******/ 			for(var key in definition) {
    /******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
    /******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
    /******/ 				}
    /******/ 			}
    /******/ 		};
    /******/ 	})();
    /******/ 	
    /******/ 	/* webpack/runtime/hasOwnProperty shorthand */
    /******/ 	(() => {
    /******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
    /******/ 	})();
    /******/ 	
    /******/ 	/* webpack/runtime/make namespace object */
    /******/ 	(() => {
    /******/ 		// define __esModule on exports
    /******/ 		__webpack_require__.r = (exports) => {
    /******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
    /******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
    /******/ 			}
    /******/ 			Object.defineProperty(exports, '__esModule', { value: true });
    /******/ 		};
    /******/ 	})();
    /******/ 	
    /************************************************************************/
    /******/ 	
    /******/ 	// startup
    /******/ 	// Load entry module and return exports
    /******/ 	// This entry module can't be inlined because the eval devtool is used.
    /******/ 	var __webpack_exports__ = __webpack_require__("./src/bridgemock.js");
    /******/ 	
    /******/ })()
    ;